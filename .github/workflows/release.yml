name: Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Release Version
        required: true
        default: 1.0.0
      snapshotVersion:
        description: Snapshot Version
        required: true
        default: 1.0.0-SNAPSHOT
    
run-name: 'version set to ${{ github.event.inputs.releaseVersion }} for release'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0

    - name: "Configure JDK 13"
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 13
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: GPG_PASSPHRASE
        architecture: x64

    - name: "Configure Docker: QEMU"
      uses: docker/setup-qemu-action@v2
      with:
        platforms: amd64,arm64

    - name: "Configure Docker: Buildx"
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: "Configure Docker: Multi-Builder Buildx"
      run: docker buildx create --use --name multi-builder --platform linux/arm64,linux/amd64

    - name: "Configure Git"
      run: |
        git fetch
        git checkout main
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: "Set Chronos Version"
      run: echo CHRONOS_VERSION=${{ github.event.inputs.releaseVersion }}  >> $GITHUB_ENV

    - name: "Maven: Set Release Version"
      run: mvn versions:set -DnewVersion=${{ github.event.inputs.releaseVersion }}

    - name: "Maven: Build"
      run: mvn clean install -Dmaven.javadoc.skip=false

    - name: "Docker: Login"
      run: docker login ${{secrets.DOCKER_REGISTRY}} -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}

    - name: "Docker: Push Chronos"
      run: |
        cd releng/chronos-platform
        docker build --load -t ghcr.io/codbex/codbex-chronos:${{ env.CHRONOS_VERSION }} .
        docker push ghcr.io/codbex/codbex-chronos:${{ env.CHRONOS_VERSION }}
        cd ../../

    - name: "Docker: Push Chronos - Keycloack"
      run: |
        cd releng/chronos-platform-keycloack
        docker build --load -t ghcr.io/codbex/codbex-chronos-keycloack:${{ env.CHRONOS_VERSION }} .
        docker push ghcr.io/codbex/codbex-chronos-keycloack:${{ env.CHRONOS_VERSION }}
        cd ../../

    - name: "Maven: Publish Package"
      run: mvn deploy -P release -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: "Create Release"
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ env.CHRONOS_VERSION }}
        name: ${{ env.CHRONOS_VERSION }}
        draft: false
        prerelease: false
        files: |
          LICENSE
        body: |
          ## Codbex Chronos - ${{ env.CHRONOS_VERSION }}

          Timesheets Management Application

    - name: "Git: Commit Release Version"
      run: |
        git add .
        git commit -m "version set to ${{ github.event.inputs.snapshotVersion }} for release"
        git push
        git checkout -b ${{ env.CHRONOS_VERSION }}
        git push origin ${{ env.CHRONOS_VERSION }}
        git checkout main

    - name: "Maven: Set Snapshot Version"
      run: mvn versions:set -DnewVersion=${{ github.event.inputs.snapshotVersion }}

    - name: "Git: Commit Snapshot Version"
      run: |
        git add .
        git commit -m "version set to ${{ github.event.inputs.snapshotVersion }} for development"
        git push

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    - uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{secrets.GKE_LOCATION}}

    - name: "Update Deployment"
      run: kubectl -n ${{ secrets.GKE_NAMESPACE }} set image deployment/${{ secrets.GKE_DEPLOY }} dirigible=ghcr.io/codbex/codbex-chronos-keycloack:${{ env.CHRONOS_VERSION }}
